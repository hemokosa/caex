コンピュータ・アートの今日的展開久保田晃弘(多摩美術大学 情報デザイン学科 情報芸術コース 教授)▼コンピュータ・アートの再定義デジタル・コンピュータが登場してから、すでに半世紀以上の年月が過ぎた。今日では、都市生活の隅々にまでコンピュータが浸透し、科学者や技術者のみならず、芸術的な創作活動をするアーティストやデザイナーにとっても、その存在や機能と無関係でいることは、ほとんど不可能である。コンピュータの登場に引き続いて1960年代の初頭に誕生した、プログラム言語を主たる手段として芸術作品を生成する「コンピュータ・アート」も、今では「ソフトウェア・アート」と総称される、より広い創作領域によって再定義されるまでに成長した。ソフトウェアを芸術表現のための(独自の方法やスキルを必要とする)ユニークでダイナミックなメディアとして用いるソフトウェア・アートを、メディア芸術の世界で最初に定義したのは、2001年にベルリンで開催された、アートとデジタル文化のための「トランスメディアーレ」フェスティヴァルであった。そこではソフトウェア・アートが以下のように定義されている[1]One definition suggested for Software Art is that it encompassesprojects in which self-written algorithmic computer software - stand-alone programs or script-based applications - is not merely afunctional tool but in itself an artistic creation.この定義の第一のポイントは「self-written algorithmic computer software」という一節にある。「アルゴリズムを自分で書く」というその行為は、今回の展覧会における60年代のアルゴリズミック・アートのパイオニアたちのアプローチと直接的につながっている。さらに最後の「artistic creation」という宣言によって、ソフトウェアが(科学的ではなく)芸術的であることの意味を再検討する必要性を提示する。▼ソフトウェア・アートの学際性60年代と今日のコンピュータ環境の最も大きな違いは、インターネットの有無だろう。ソフトウェアの非物質性、デジタル・データの無限複製性という特徴を生かして、インターネット上でソフトウェア・アートのポータルサイト「runme.org」[2]を構築したのが、自らもソフトウェア・アーティストとして活動するロシアのアレクセイ・シュルギンである。runme.orgのトップページに掲載されている、ソフトウエア・アートのカテゴリーリストは以下の通りである。algorithmic appreciation (2) > non-code-related (1) > pseudo-quines (0)appropriation and plagiarism (5) > stealing (0)artificial intelligence (10)artistic tool (37) > audiovisual (28) > narrative (4) > useless (1)bots and agents (15)browser art (15)code art (17) > code poetry (7) > minimal code (1) > obfuscation (3) > programming languages (4) > quines (1)conceptual software (30) > without hardware - formal instruction (3)data transformation (26) > data collage (8) > multimedia (5) > sonification (3) > visualization (3)digital aesthetics r&d (9) > disfunctionality (3) > low tech (5)digital folk and artisanship (15) > ascii art (2) > audio-visual (1) > gimmicks (5) > screen savers (1)existing software manipulations (7) > artistic re-packaging (1) > cracks and patches (0) > instructions (1) > software plugins (2)games (10) > deconstruction and modification (6) > public games (2)generative art (43) > algorithmic audio (10) > algorithmic design (5) > algorithmic image (16) > algorithmic multimedia (8)hardware transformation (6)installation-based (6)institutional critique (7)performance-based (9)political and activist software (23) > cease-and-desist-ware (5) > illicit software (2) > rhetorical software (1) > software resistance (12) > useful activist software (2)social software (2)software cultures - links (13)system dysfunctionality (6) > denial of service (3) > virus - security (3)text - software art related (47) > aesthetics of software art (7) > cultural critique of software (13) > history of software art (12) > weblog (1)text manipulation (30) > text editors (4)[注] ()内の数字は、2006年9月20日現在の、それぞれのカテゴリに含まれる作品数である。詩や美学といった伝統的なテーマから、人工知能やエージェントといったコンピュータ科学、あるいはゲームのようなポップカルチャーまで、ここで示されているカテゴリーリストの広範さは、今日のソフトウェア・アートの学際性を如実に反映している。さらに同じ runme.org トップページ右側のキーワード・クラウドを子細に見れば、ソフトウェア・アートとそれをとりまくコミュニティが、芸術家と科学者/技術者に代表される異分野の触発や協同を喚起する、創造的な場となっていることが良くわかる。▼アーティストとプログラミングコンピュータ・アートが誕生してから半世紀近く経たのち、ある種のリバイバル的な要素も含みながらも、ソフトウェア・アートのような新たな形で、再びアルゴリズムやコードにアーティストの注目が集まった背景として、今から10年程前、90年代半ばにおこったプログラミング革命、より正確にはアーティストのためのプログラミング革命があったことを忘れるわけにはいかない。それまでのプログラミングは基本的に、コンピュータ科学者や工学者、技術者の文化に根差していた。プログラムは正確に動かなければならない、プログラムは構造(モジュール)化されていなければならない、プログラムは効率良くなければならない、プログラムは簡潔でなければならない…。こんなある種の完璧主義に根差した価値観がプログラムの美のベースにあり、それをいかにエレガントに実装するかが、すなわち「アート・オブ・プログラミング」の実践であった。そうした文化を反映して、従来のプログラミングの教科書の多くは、数の並べ替えや文字列処理、数値計算やデータ構造といった数理的な例題から始まる[3]。しかし視覚的、空間的にものごとを考え、直感的、身体的にコミュニケートするアーティストやデザイナーに、そうした抽象的・論理的な例題は向いていない。アーティストがまず最初に興味を持つのは、ディスプレイ上に点を打ち、線を引き、面を塗ることであり、モニタスピーカから、クリック、サイン波、ノイズなどの音を出すことである。だからアーティストやデザイナーのためのプログラミング（教育）は、まず画面上に線をひくことや、スピーカで音を出すことから出発する。プログラミングの結果が視覚や聴覚に即座にフィードバックされ、それを受けて即座にプログラムを修正できるようになっていなければならない。最初の内はプログラムをシンプルにしたり、エレガントにすることをあまり考える必要はない。どんなに愚直で非効率的な書き方でも、とにかくプログラムを動かすことが重要だ。一旦プログラムが走りさえすれば、あとは点や線を動かしたり、音を変化させたり、マウスやキーボードでインタラクトさせる過程で、構造化や抽象化のテクニックを必要に応じて少しずつ身につけていけば良い。アーティストのためのプログラミングは、点や線を「描く(造形)」「動かす(運動)」「インタラクトする(反応)」という3つのステップによる、ヒューリスティックなプロセスに根差している。▼プログラミング環境とコミュニティこうしたプログラミング教育を行なった先駆者が、80年代初頭にプログラミング言語 LOGO を開発したシーモア・パパートや、90年代に DBN(Design byNumbers)を実装した米MITのジョン前田である[4]。そこから生まれたProcessing[5] というオープンなプログラミング環境は、インターネットを介して、世界各地のアーティストやデザイン教育の現場に拡がった。プロセッシングでは、個々のプログラムのことをスケッチ(ブック)と呼ぶが、これはProcessing がアルゴリズミックな作品をつくるためのドローイングやスケッチ、すなわち(あらゆる創作にとって必要不可欠な)プロトタイピングに特化したツールであることの現れである。今日では Processing 以外にも、フリーでオープンなプログラミング環境が、いくつも公開されている[6][7][8]。同様に、それらを活用したアルゴリズミックな作品をネット上で公開しているアーティストも多い[9][10]。オープンなプログラミング環境には、そのユーザやディベロッパを核とした、オープンなコミュニティがインターネット上に形成される。そこではアプリケーションのみならず、ソースコードやドキュメントが自由に交換され、知識や文化が広く伝達、共有されている。最初に紹介した runme.org のような、アルゴリズム・アートに関連したポータルサイトや、数々のBlogサイトの存在はその一例だ[11][12][13][14]。インターネットを介したオープンな情報共有や共同学習の場は、学会や論文の壁に守られていたアカデミズムとストリートの境界を融解し、今では誰もがその気にさえなれば、プログラミングに必要な環境や知識を自分の手で得ることができる。画像ファイルやサウンドファイル同様に、プログラム・コードも自由にサンプリング/リミックスすることが可能であり、ヘルプファイルやサンプルファイル、オンライン上の作品(のソースコード)を活用することで、発見的な、あるいは事例と類推による学習や制作を自在に行うことができる。そこにはある種の無駄や試行錯誤が入り込まざるを得ないが、そうした一見冗長なものの中にこそ、新たな表現の可能性が潜在している。プログラミングやソフトウェアの世界にも、DJカルチャー[15]が深く浸透しつつある。▼素材としてのプログラミング言語アルゴリズムを自ら書くソフトウェア・アーティストにとって、プログラミング言語は、木材や金属、絵具やキャンバスのような、表現のための「素材」である。アートは、最終的には素材や手法に依拠しない、普遍的な何ものかを獲得しなければならないし、素材そのものに囚われ過ぎることはフェティシズムの罠に堕ちてしまう危険性はあるが、それでも自分が選択した素材の特徴を知り、それを自在に操作できるようにすることは、表現することの基本のひとつであることに変りはない。逆にいえば、それぞれの素材には、その素材に適した形式や使用法(過程)があり、優れた表現を生み出すためには、その選択や組み合わせに対する洞察が必要不可欠である。汎用のアプリケーションを使用せず、直接プログラムを書くことで表現を生み出すことは、自らが選択した素材を自らが直接操作する、ということでもある。その背景には、直接操作によるディテールの制御や、高速かつ大量の処理速度といったプラクティカルな利点のみならず、自分が使用するツールや環境を自分で構築するという、リベラルなDYI精神がある。企業によって開発される汎用のアプリケーションは、ハードウェアの進歩と一体化した商業的利潤追求のためのヴァージョンアップにより過剰に肥大化し、その結果汎用アプリケーションの枠内で表現できることは、その豪華な見かけとは裏腹に、日に日に狭められつつある。プログラミングという素材の直接操作によって、コンピュータが持つ本当の潜在力や可能性を発掘し、そこから自分ならではの表現を見い出すことこそが、コンピュータやソフトウェアを芸術的なメディアとして最大限に活用するための、今なお最も有効なアプローチである。▼ライヴ・コーディング近年「ライヴ・コーディング」あるいは「オン・ザ・フライ・プログラミング」「ジャスト・イン・タイム・プログラミング」と呼ばれる手法によるパフォーマンスが、一部のソフトウェア・アーティストの手で行なわれ始めた。ライヴ・コーディングとは、事前に準備したプログラムを実行させるだけでなく、その場で並行してプログラムを書いたり修正することで、表現を生成するアルゴリズムをそのものをリアルタイムに生成・操作するパフォーマンス手法である。ライヴ・コーディングにおいては、プログラミング言語の素材としての特徴が明確かつ切実に表れる。例えば、LISP や Scheme あるいは Haskell のような関数型言語は、C++ や Java のような命令型言語に比べて、プログラムを格段に短かく書くことができる。こうした生産的な言語を用いれば、プログラム・コードを直接操作することが、ボタンやスライダといったGUI以上に、操作性が良く自由度の高いインターフェイスに成り得る。それは単なるパフォーマンスの方法論を越えて、今日の商用アプリケーションを支配してきたGUIパラダイムの再検討と、その本質的な見直しにもつながっていく。ライヴ・コーディングに関する代表的なオンライン・コミュニティが TOPLAP[16] である。Autoshop や Auto-Illustratorといったジェネラティヴなグラフィック・ツールの開発者でもあるエイドリアン・ワード[17]、klipp av[18]というラップトップAVユニットで活動するニック・コリンズとフレドリック・オロフソン、fluxus[19]というSchemeベースのライヴ・コーディング用グラフィックス言語を開発するデイヴ・グリフィス[20]といった、コーディングの強者たちが立ち上げたこのサイトには、ライヴ・コーディングをめぐるさまざまなインフォメーションやドキュメント、ディスカッションがアップロードされている。ライヴ・コーディングを行うためのプログラミング言語にもさまざまなものがある。既出の fluxus だけでなく ChucK[21] や impromptu[22] のように、ライヴ・コーディングのために新たに開発されたものを始めとして、汎用言語のLISP や Perl、LOGO や Smalltalk などから SuperCollider3[23] のJITLib(Just-In-Time Library) まで、さまざまな言語が使用可能である。基本的には、ソースコードを逐次解釈しながら実行できるインタープリタ言語を用いるのが良い。とはいえ前述のように、ライヴ・コーディングの可能性は、プログラミング言語のデザイン・パラダイムや実装の良し悪しに大きく依存する。▼芸術と科学の境界素材としてのプログラミング言語の可能性を、人間のスキルや判断によって最大限に活用しようとするライヴ・コーディングは、アルゴリズミックな表現におけるプログラム・コードそのものの意味や形式に、もう一度光を当て直す。アーティストによるプログラミングは、往々にしてコードから生成されるアーティスティックな表現のみに注意が向き、プログラムコード自体は、映像やサウンドを生み出すための影の存在になってしまいがちだ。だが本当にそれで良いのだろうか。コードは表現を生み出すための裏方であり、その中身の詳細やコードそのものの意味や形式は問われなくとも良いのだろうか。米スタンフォード大学のコンピュータプログラミング芸術名誉教授のドナルド・クヌースは「科学はコンピュータに説明できるくらい私たちが良く理解していることであり、芸術はそれ以外のすべて」だと語る[24]。だとすれば、コンピュータ科学の対象であるコードによって記述できないことこそが芸術であり、コンピュータ・アートとは、芸術という語り得ぬものに沈黙せず、逆に饒舌になることだといわなければならない。確かに芸術と科学を一点に収束させるのは不可能だ。しかしだからこそ、その境界に着目しなければならない。科学と芸術が共に変化し続ける限り、その境界も常に流動的であり続ける。最初に示したように、学際的なソフトウェア・アートにおいて、形式的なプログラム・コードとそれを実行することから生み出されるアーティスティックな表現は、科学と芸術の境界を顕在化する、1対1に結びついた双子の兄弟である。アーティストのためのコンピュータ環境がインターネットを介して世界各地に普及しつつある今、コードの実行結果としての造形や構成のみならず、コードそのものの美を支えてきた抽象性や汎用性、効率や整合性から生まれる美的感情を再考することが必要だ。そのためにもライヴ・コーディングのようなマージナルなプログラミングを通じて、アート・オブ・プログラミングとコンピュータ・アートの境界の在処を問い、そこに積極的に介入していくことが、境界としてのソフトウェア・アートの、ひいては芸術と科学の未来を考えるための、重要なテーマのひとつになるだろう。道はまだ始まったばかりである。▼参考文献[1] transmediale.01, http://www.transmediale.de/01/en/conf_artistic.htm[2] runme.org - say it with software art!, http://runme.org/(シュルギンはオルガ・ゴリウノーヴァらと、ソフトウェア・アート・フェスティヴァルの Readme, http://readme.runme.org も主宰している。)[3] アラン・ビアマン『やさしいコンピュータ科学』アスキー，1993.[4] ジョン前田『Design By Numbers—デジタル・メディアのデザイン技法』ソフトバンク，2001.[5] Processing 1.0 (BETA), http://processing.org/[6] DrawBot, http://drawbot.com/[7] NodeBox, http://www.nodebox.net/[8] Context Free, http://www.contextfreeart.org/[9] Gallery of Computation | generative artifacts,http://www.complexification.net/[10] FLIGHT404, http://flight404.com/[11] Code & form >> Computational aesthetics,http://workshop.evolutionzone.com/[12] Generator.x: Software and generative strategies in art anddesign, http://www.generatorx.no/[13] artificial.dk - your resource on net art, software art, and othercomputer based art forms, http://www.artificial.dk/[14] CodeTree: Watch Your Code Branch Out and Grow,http://www.codetree.org/[15] ウルフ・ポーシャルト『DJカルチャー―ポップカルチャーの思想史』，三元社，2004．[16] Main Page - Toplap, http://www.toplap.org[17] SIGNWAVE UK - Home, http://www.signwave.co.uk/[18] KLIPP AV, http://www.klippav.org/[19] fluxus, http://www.pawfal.org/Software/fluxus/[20] dave's page of art and programming, http://www.pawfal.org/dave/[21] ChucK => Strongly-timed, On-the-fly Audio Programming Language,http://chuck.cs.princeton.edu/[22] impromptu, http://impromptu.moso.com.au/[23] SuperCollider - Hub, http://supercollider.sourceforge.net/[24] ドナルド・クヌース『コンピュータ科学者がめったに語らないこと』エスアイビー・アクセス，2003．